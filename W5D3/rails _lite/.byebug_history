continue
route_params
c
q
route_params
c
route_params
q
route_params
q
params
q
route_params.names.each {|key| p key}
match_data.names
match_data = regex.match("/users/42")
regex = Regexp.new '/users/(?<id>\d+)'
route_params.names
route_params.string
route_params.name
route_params.class
route_params
route_params.names
route_params.hash
route_params.methods
route_params.each_key {|key| p route_params[key]} 
c
q
c
params
q
req.params
req
exit
req.params
route_params = @pattern.match(req.path)
@pattern.match
@pattern.class
@pattern
Regexp.class
MatchData.new(@pattern)
q
control.invoke_action(@action_name)
control = @controller_class.new(req, res, {})
control = @controller_name.new(req, res, {})
@controller_class.class
@controller_class
control.class
control
@action_name
q
@http_method
req.fullpath
req.path
req.path =~ @pattern
req.fullpath =~ @pattern
req.fullpath ~= @pattern
@pattern
req.fullpath
q
JSON.parse(req.cookies['_rails_lite_app'])
JSON.parse(req.cookies['_rails_lite_app']
req.cookies['_rails_lite_app']
value
value = 
req.cookies['_rails_lite_app']
req.cookies[:_rails_lite_app]
req.cookies.class
value
req.cookies
c
n
req.cookies
value
n
c
q
value
req.cookies
value
n
q
JSON.parse(req.cookies["_rails_lite_app"])
JSON.parse(req.cookies["_rails_lite_app]")
JSON.parse(req.cookies["_rails_lite_app])
JSON.parse(req.cookies)
req.cookies
c
n
y
q
exit
self.class.to_s.underscore
self.class.to_s
self.class
require 'active_support/inflector'
'active_support/inflector'
self.class.underscore
exit
self.class.underscore
self.class
c
n
controller_name
template_name
